name: Full CI - SAST, SCA and Docker

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  SAST:
    name: SAST - Static Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      sast-status: ${{ steps.validate-sonar.outputs.qualitygate-status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarCloud Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Validando resultados de SonarCloud
        id: validate-sonar
        run: |
          echo "⌛ Esperando resultados del análisis en SonarCloud..."

          for i in {1..12}; do
            response=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}")
            status=$(echo "$response" | jq -r '.projectStatus.status')

            if [[ "$status" == "OK" || "$status" == "WARN" || "$status" == "ERROR" ]]; then
              echo "Estado del Quality Gate: $status"
              echo "qualitygate-status=$status" >> $GITHUB_OUTPUT
              break
            fi

            echo "⏳ Aún no disponible (status: $status), esperando 5s..."
            sleep 5
          done

          case "$status" in
            "OK")
              echo "✔️ Calidad del código: OK"
              ;;
            "WARN")
              echo "⚠️ Calidad del código: WARN"
              exit 1
              ;;
            "ERROR")
              echo "❌ Calidad del código: ERROR"
              exit 1
              ;;
            *)
              echo "❓ Estado desconocido del Quality Gate: $status"
              exit 1
              ;;
          esac

  SCA:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    needs: SAST
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: cd functions && npm ci

      - name: Ensure reports directory exists
        run: mkdir -p reports

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "nextjs-final-project"
          path: "./functions"
          format: "ALL"
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 4
            --suppression ./functions/suppression.xml

      - name: Upload Dependency-Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  DockerBuild:
    name: Docker - Build and Push
    runs-on: ubuntu-latest
    needs: [SCA]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: kratos32/labfinaldevsecops:latest

  DockerScanTrivy:
    name: Docker - Scan Image
    runs-on: ubuntu-latest
    needs: DockerBuild
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Pull
        run: docker pull kratos32/labfinaldevsecops:latest

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: kratos32/labfinaldevsecops:latest
          format: "table"
      - name: Push Docker Image
        run: docker push kratos32/labfinaldevsecops:latest

  #--------------------DAST------------------------#
  DAST:
    name: DAST - Dynamic Analysis
    needs: DockerScanTrivy
    runs-on: self-hosted
    defaults:
      run:
        shell: cmd # Cambiado a PowerShell para el trabajo de análisis dinámico DAST
    steps:
      - name: Despliegue de la imagen Docker
        run: |
          docker run -d -p 3000:3000 --name labfinaldevsecops kratos32/labfinaldevsecops:latest
      - name: Esperar a que la aplicación esté lista
        shell: cmd
        run: |
          echo Esperando 30 segundos para que la app en el puerto 3000 se inicie...
          ping -n 31 127.0.0.1 > nul

      - name: Ejecutar OWASP ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: "http://localhost:3000/"
