name: SAST - Static Analysis

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  SAST:
    name: SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN  }}

      - name: SonarCloud Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Validando resultados de SonarCloud
        run: |
          idanalisis=$(curl -s -X GET -u '${{ secrets.SONAR_TOKEN }}: ' 'https://sonarcloud.io/api/ce/component?component=${{ github.event.repository.name }}')
          idanalisisParse=$(echo "$idanalisis" | jq .current.analysisId | sed -e 's/^"//' -e 's/"$//')
          echo "ID del análisis: $idanalisisParse"
          qualityGate=$(curl -s -X GET -u '${{ secrets.SONAR_TOKEN }}: ' "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$idanalisisParse")
          qualitygateStatus=$(echo "$qualityGate" | jq .projectStatus.status | sed -e 's/^"//' -e 's/"$//')
          case "$qualitygateStatus" in
            "OK")
              echo "Calidad del código: OK"
              ;;
            "WARN")
              echo "Calidad del código: WARN"
              exit 1
              ;;
            "ERROR")
              echo "Calidad del código: ERROR"
              exit 1
              ;;
            *)
              echo "Estado desconocido de la calidad del código: $qualitygateStatus"
              exit 1
              ;;
          esac

